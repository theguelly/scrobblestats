###################
# BUILD FOR LOCAL DEVELOPMENT
###################

FROM node:18.17.1 As development

# Create app directory
WORKDIR /usr/src/www

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
# COPY --chown=node:node package*.json ./
COPY package*.json ./
COPY yarn.lock ./

# Install app dependencies
RUN yarn install --immutable --immutable-cache

# Bundle app source
# COPY --chown=node:node . .
COPY . .

# Use the node user from the image (instead of the root user)
# USER node

###################
# BUILD FOR PRODUCTION
###################

FROM node:18.17.1 As build

WORKDIR /usr/src/www

COPY --chown=node:node package*.json ./

# In order to run `npm run build` we need access to the Nest CLI.
# The Nest CLI is a dev dependency,
# In the previous development stage we ran `npm ci` which installed all dependencies.
# So we can copy over the node_modules directory from the development image into this build image.
COPY --chown=node:node --from=development /usr/src/app/node_modules ./node_modules

COPY --chown=node:node . .

# Run the build command which creates the production bundle
RUN yarn build

# Set NODE_ENV environment variable
ENV NODE_ENV production

# Running `npm ci` removes the existing node_modules directory.
# Passing in --only=production ensures that only the production dependencies are installed.
# This ensures that the node_modules directory is as optimized as possible.
#RUN npm ci --only=production && npm cache clean --force
RUN yarn install --production --immutable --immutable-cache && yarn cache clean

USER node

###################
# PRODUCTION
###################

FROM node:18.17.1 As production

# Copy the bundled code from the build stage to the production image
COPY --chown=node:node --from=build /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=build /usr/src/app/dist ./dist

# Expose the port the front-end will run on
EXPOSE 3001

# Start the server using the production build
CMD [ "node", "dist/main.js" ]